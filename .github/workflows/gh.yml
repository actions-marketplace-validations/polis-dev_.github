name: gh
concurrency: "${{ github.head_ref || github.run_id || github.ref_name || github.ref }}-${{github.workflow}}"
on:
  workflow_dispatch:
  workflow_call:
  schedule: [{ cron: "0 4 * * *" }]
  push:
    branches: [main]
    paths:
      - .github/workflows/gh.yml
      - .github/Dockerfile
      - .github/setup-alpine.sh
      - .github/.dockerignore
jobs:

  test:
    needs: [build]
    runs-on: ubuntu-latest
    container: "ghcr.io/${{ github.repository_owner }}/${{ github.workflow }}:main"
    env: { GH_REPO: "${{ github.repository }}", GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
    steps:
      - run: gh workflow list -a
      - run: gh issue list

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65
        with:
          cosign-release: 'v1.9.0'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@59b5ed61248daa4967b4745021a386416e1318ce

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@210d783f42dfbd5492271c72e5f4232408f1d169
        with:
          images: |-
            ghcr.io/${{ github.repository_owner }}/${{ github.workflow }}
          tags: |-
            # branch event
            type=ref,event=branch
            # tag event
            type=ref,event=tag
            # pull request event
            type=ref,event=pr

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@48888e0b1305dca3a741ceb3b5a04ea336cd2626
        with:
          context: "./.github"
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          labels: |-
            org.opencontainers.image.title=${{ github.workflow }}
            org.opencontainers.image.description=our ${{ github.workflow }} image, baked by github-actions.
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

  diagnostics:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - {run: "#pretty-print github.*\njq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(github) }}\n__JSON_DATA__\n", shell: bash}
      - {run: "#pretty-print inputs.*\njq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(inputs) }}\n__JSON_DATA__\n", shell: bash}
      - {run: "#pretty-print job.*\n   jq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(job) }}\n__JSON_DATA__\n", shell: bash}
      - {run: "#pretty-print env.*\n   jq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(env) }}\n__JSON_DATA__\n", shell: bash}
      - {run: "#pretty-print steps.*\n jq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(steps) }}\n__JSON_DATA__\n", shell: bash}
      - {run: "#pretty-print runner.*\njq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(runner) }}\n__JSON_DATA__\n", shell: bash}
